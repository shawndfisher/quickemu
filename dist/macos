#!/usr/bin/env bash

PRETTY_NAME="macOS"
HOMEPAGE="https://www.apple.com/macos/"
INFO="macOS|proprietary|-|https://www.apple.com/macos/|Work and play on your Mac are even more powerful. Elevate your presence on video calls. Access information in all-new ways. Boost gaming performance. And discover even more ways to personalize your Mac."

GUEST="macos"
IMAGE_TYPE="img"

#Override
# function web_get() {
#     local CHECK=""
#     local HEADERS=()
#     local URL="${1}"
#     local DIR="${2}"
#     local FILE=""
#     local USER_AGENT="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"

#     # if no 3rd parameter, delete everything to late '/' in URL and use as FILE
#     if [ -n "${3}" ]; then
#         FILE="${3}"
#     else
#         FILE="${URL##*/}"
#     fi

#     # Process any URL redirections after the file name has been extracted
#     URL=$(web_redirect "${URL}")

#     # Process any headers
#     while (( "$#" )); do
#         if [ "${1}" == "--header" ]; then
#             HEADERS+=("${1}" "${2}")
#             shift 2
#         else
#             shift
#         fi
#     done

#     if [ "${DIR}" != "$(pwd)" ] && ! mkdir -p "${DIR}" 2>/dev/null; then
#         echo "ERROR! Unable to create directory ${DIR}"
#         exit 1
#     fi

#     if ! curl --progress-bar --location --output "${DIR}/${FILE}" --continue-at - --user-agent "${USER_AGENT}" "${HEADERS[@]}" -- "${URL}"; then
#         echo "ERROR! Failed to download ${URL} with curl."
#         rm -f "${DIR}/${FILE}"
#     fi
# }

function dist_releases() {
    echo high-sierra mojave catalina big-sur monterey ventura sonoma
}

function generate_id() {
    local macRecoveryID=""
    local TYPE="${1}"
    local valid_chars=("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F")
    for ((i=0; i<$TYPE; i++)); do
        macRecoveryID+="${valid_chars[$((RANDOM % 16))]}"
    done
    echo "${macRecoveryID}"
}

function dist_image() {
    local BOARD_ID=""
    local CWD=""
    local CHUNKCHECK=""
    local MLB="00000000000000000"
    local OS_TYPE="default"

    case ${RELEASE} in
      lion)           #10.7
        BOARD_ID="Mac-2E6FAB96566FE58C"
        MLB="00000000000F25Y00";;
      mountainlion)   #10.8
        BOARD_ID="Mac-7DF2A3B5E5D671ED"
        MLB="00000000000F65100";;
      mavericks)      #10.9
        BOARD_ID="Mac-F60DEB81FF30ACF6"
        MLB="00000000000FNN100";;
      yosemite)       #10.10
        BOARD_ID="Mac-E43C1C25D4880AD6"
        MLB="00000000000GDVW00";;
      elcapitan)      #10.11
        BOARD_ID="Mac-FFE5EF870D7BA81A"
        MLB="00000000000GQRX00";;
      sierra)         #10.12
        BOARD_ID="Mac-77F17D7DA9285301"
        MLB="00000000000J0DX00";;
      high-sierra)    #10.13
        BOARD_ID="Mac-BE088AF8C5EB4FA2"
        MLB="00000000000J80300";;
      mojave)         #10.14
        BOARD_ID="Mac-7BA5B2DFE22DDD8C"
        MLB="00000000000KXPG00";;
      catalina)       #10.15
        BOARD_ID="Mac-00BE6ED71E35EB86";;
      big-sur)        #11
        BOARD_ID="Mac-42FD25EABCABB274";;
      monterey)       #12
        BOARD_ID="Mac-E43C1C25D4880AD6";;
      ventura)        #13
        BOARD_ID="Mac-BE088AF8C5EB4FA2";;
      sonoma)
        BOARD_ID="Mac-53FDB3D8DB8CA971";;
      *) echo "ERROR! Unknown release: ${RELEASE}"
        dist_releases
        exit 1;;
    esac

    CWD="$(dirname "${0}")"
    if [ -x "${CWD}/chunkcheck" ]; then
        CHUNKCHECK="${CWD}/chunkcheck"
    elif [ -x "$(command -v chunkcheck)" ]; then
        CHUNKCHECK="$(command -v chunkcheck)"
    fi

    if [ -z "${CHUNKCHECK}" ]; then
        # read -p "ERROR! Can not find chunkcheck. Will not be able to verify image. Proceed anyway?" skipVerification
        # if [ "${skipVerification,,}" != "y" ] && [ "${skipVerification,,}" != "yes" ]; then
        #     exit 1
        # fi
        # echo 'Skipping verification' && skipVerification="true"
        skipVerification="true"
    fi

    OpenCore_qcow2="https://github.com/kholia/OSX-KVM/raw/master/OpenCore/OpenCore.qcow2"
    OVMF_CODE="https://github.com/kholia/OSX-KVM/raw/master/OVMF_CODE.fd"
    OVMF_VARS="https://github.com/kholia/OSX-KVM/raw/master/OVMF_VARS-1920x1080.fd"

    local appleSession=$(curl -v -H "Host: osrecovery.apple.com" -H "Connection: close" -A "InternetRecovery/1.0" http://osrecovery.apple.com/ 2>&1 | tr ';' '\n' | awk -F'session=|;' '{print $2}' | grep 1)
    local info=$(curl -s -X POST -H "Host: osrecovery.apple.com" -H "Connection: close" -A "InternetRecovery/1.0" -b "session=\"${appleSession}\"" -H "Content-Type: text/plain"\
    -d $'cid='$(generate_id 16)$'\nsn='${MLB}$'\nbid='${BOARD_ID}$'\nk='$(generate_id 64)$'\nfg='$(generate_id 64)$'\nos='${OS_TYPE} \
    http://osrecovery.apple.com/InstallationPayload/RecoveryImage | tr ' ' '\n')
    local downloadLink=$(echo "$info" | grep 'oscdn' | grep 'dmg')
    local downloadSession=$(echo "$info" | grep 'expires' | grep 'dmg')
    local chunkListLink=$(echo "$info" | grep 'oscdn' | grep 'chunklist')
    local chunkListSession=$(echo "$info" | grep 'expires' | grep 'chunklist')
    
    # if [ "${OPERATION}" == "show" ]; then
    #     test_result "${OS}" "${RELEASE}" "" "${downloadLink}"
    #     exit 0
    # elif [ "${OPERATION}" == "test" ]; then
    #     local CHECK=$(web_check "${downloadLink}" --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}" && echo 'PASS' || echo 'FAIL')
    #     test_result "${OS}" "${RELEASE}" "" "${downloadLink}" "${CHECK}"
    #     exit 0
    # elif [ "${OPERATION}" == "download" ]; then
    #     echo "Downloading macOS ${RELEASE} from ${downloadLink}"
    #     web_get "${downloadLink}" "${VM_PATH}" RecoveryImage.dmg --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}"
    #     web_get "${chunkListLink}" "${VM_PATH}" RecoveryImage.chunklist --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}"
    #     VM_PATH="$(pwd)"
    # else
        # echo "Downloading macOS firmware"
        web_get "${OpenCore_qcow2}" "${VM_PATH}"
        web_get "${OVMF_CODE}" "${VM_PATH}"
        if [ ! -e "${VM_PATH}/OVMF_VARS-1920x1080.fd" ]; then
            web_get "${OVMF_VARS}" "${VM_PATH}"
        fi

        if [ ! -e "${VM_PATH}/RecoveryImage.chunklist" ]; then
            # echo "Downloading macOS ${RELEASE} from ${downloadLink}"
            web_get "${downloadLink}" "${VM_PATH}" RecoveryImage.dmg --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}"
            web_get "${chunkListLink}" "${VM_PATH}" RecoveryImage.chunklist --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}"
        fi
    # fi
    
    # if [ "${skipVerification}" != "true" ]; then
    #     if ! "${CHUNKCHECK}" "${VM_PATH}" 2> /dev/null; then
    #         echo "Verification failed."
    #     else
    #         echo "Verified macOS ${RELEASE} image using chunklist."
    #     fi
    # else
    #     echo "Skipping verification of image."
    # fi

    # Dumb hack
    cp "${VM_PATH}/RecoveryImage.dmg" "${VM_PATH}/RecoveryImage.img"

    echo "file://${PWD}/${VM_PATH}/RecoveryImage.img"
}

function dist_vm_options_tweak() {
    echo "macos_release=\"${RELEASE}\"" >> "${CONF_FILE}"
    # https://github.com/quickemu-project/quickemu/issues/438
    if [ "${RELEASE}" == "monterey" ]; then
        echo "cpu_cores=2" >> "${CONF_FILE}"
    fi
}

function dist_image_handle() {
    rm "${VM_PATH}/RecoveryImage.img"
    if [ -e "${VM_PATH}/RecoveryImage.dmg" ] && [ ! -e "${VM_PATH}/RecoveryImage.img" ]; then
        # echo "Converting RecoveryImage..."
        qemu-img convert "${VM_PATH}/RecoveryImage.dmg" -O raw "${VM_PATH}/RecoveryImage.img" 2>/dev/null
    fi
    rm -f "${VM_PATH}/RecoveryImage.dmg" "${VM_PATH}/RecoveryImage.chunklist"
}

# vim:tabstop=4:shiftwidth=4:expandtab
